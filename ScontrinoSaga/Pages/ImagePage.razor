@page "/image/{Id}"
@using System.IO
@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager Navigation
@inject SagaConfig cfg
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment
@using Microsoft.AspNetCore.Components
@if (!string.IsNullOrEmpty(Id))
{
    <div class="svg-container" >
    @((MarkupString)SVG)
    </div>
     <button class="btn btn-primary" @onclick="PrintTotal">Stampa</button>
     <NavLink class="nav-link" href="/comanda" >
        <span class="oi oi-image" aria-hidden="true">Nuovo Ordine</span>
    </NavLink>
}


@code {
    [Parameter]
    public string? Id { get; set; }

    private AppDBContext _context;
    private List<InvoiceRow> Order= new List<InvoiceRow>();
    private Invoice? invoice;

    private POSPrinter lpt;
    private string SVG { get; set; } = string.Empty;
    protected override async Task OnInitializedAsync() {
        _context = DbFactory.CreateDbContext();

        invoice = await _context.Invoices
                                .Include(i => i.InvoiceRows)
                                .ThenInclude(i => i.InvoiceRowProduct)
                                .FirstOrDefaultAsync(i => i.InvoiceGUID == Id);
        
        Order = (invoice !=null)? invoice.InvoiceRows.ToList() : new List<InvoiceRow>();
        
        lpt=new POSPrinter(cfg);
        SVG= lpt.PrintSvg(Order);
    }

    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(Id))
        {
            //await JSRuntime.InvokeVoidAsync("printSvg");
        }
        //Navigation.NavigateTo("/");
    }
    /*/
    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(Id))
        {
            var imagePath = Path.Combine(Environment.WebRootPath, "images", $"{Id}.svg");
            if (File.Exists(imagePath))
            {
                ImagePath = $"/images/{Id}.svg";
            }
            else
            {
                ImagePath = null;
            }
        }
    }
    //*/
    protected void PrintTotal()
    {
        lpt.PrintTotal(Order);
    }
}   
