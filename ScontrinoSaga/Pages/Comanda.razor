@page "/Comanda"

@inject IDbContextFactory<AppDBContext> DbFactory
@inject SagaConfig cfg
@using SkiaSharp

<PageTitle>Comanda</PageTitle>

<h1>@(DateTime.Now.ToShortDateString() ): Comanda</h1>

@if (Products != null ) {
    <h3>Prodotti</h3>
    @foreach (var p in Products){
        <div class="card">
            <div class="card-body">
                <button class="btn btn-primary btn-prod" @onclick="(args)=> AddProduct(args, p.ProductID)"><img class="prdlogo" src="@p.ProductIcon" height="64px" width="64px"/><br />@p.ProductDescription</button>
                <button class="btn btn-danger btn-prod" height="64px" @onclick="(args)=> SubProduct(args, p.ProductID)"><img class="prdlogo" src="@p.ProductIcon" height="64px" width="64px" /><br />@p.ProductDescription</button>
            </div>
        </div>
    } 
}
<hr />
<!-- Print stylesheet -->
<style>
    .print: {
        display: block; 
        width:58mm !important; 
        padding-left: 1mm; 
        padding-right: 1mm; ; 
    }
</style>

<div  id="printer" class="modal print"  >
    <div class="modal-dialog">
    <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Modal Header</h4>
            </div>
            <div class="modal-body">
                <img src="logo.png"  class="print" /> 
                @foreach (var p in Order){
                    <div class="print">
                        @p.InvoiceRowQuantity X @p.InvoiceRowProduct.ProductDescription @p.InvoiceRowProduct.ProductPrice &euro;
                        <!--
                        <div class="card-body justify-content-end">
                            @p.InvoiceRowPrice &euro;
                        </div>
                        -->
                    </div>
                }
                <div class="print">
                    <b>@string.Format("Totale: {0:F2}", @subTotal)</b>
                </div>
            </div>
        </div>
    </div>
</div>


@if (Order != null ) {
    <h3>Order</h3>
    @foreach (var p in Order){
        <div class="card">
            <div class="card-header">
                @p.InvoiceRowQuantity X @p.InvoiceRowProduct.ProductDescription @p.InvoiceRowProduct.ProductPrice &euro;
            </div>
            <!--
            <div class="card-body justify-content-end">
                @p.InvoiceRowPrice &euro;
            </div>
            -->
        </div>
    }
}

<hr />
<div class="">
    <b>@string.Format("Totale Provisorio: {0:F2}", @subTotal)</b>
</div>
<hr />
<button class="btn btn-primary" @onclick="PrintTotalAsSvg">Conferma Ordine</button>

@code {
    private double subTotal = 0;
    private AppDBContext _context;
    private IEnumerable<Product> Products;
    private List<InvoiceRow> Order;
    Printer lpt;
    public bool IsPrinting = false;

    protected override async Task OnInitializedAsync() {
        _context = DbFactory.CreateDbContext();

        // this.lpt = new Printer("ExcelVan", "utf-8");
        this.lpt = new Printer(cfg.PrinterName, "0"); //"utf-8");


        Products = _context.Products
                .Where(p => p.IsAvaialable)
                .ToList();

        //currentCount = 0;
        this.CleanOrder();
    }
    private void CleanOrder() {
        subTotal = 0d;
        this.Order = new List<InvoiceRow>();
        /*
        foreach (var p in Products) {
        var tmp = new InvoiceRow() {
        InvoiceRowQuantity = 0,
        InvoiceRowProduct = p
        };

        Order.Append(tmp);
    }
    //*/
    }

    private void SubTotal() {
        subTotal = Order.Sum(iv => iv.InvoiceRowPrice);
    }

    private void AddProduct(MouseEventArgs e,int ProductID) {
        //_context = DbFactory.CreateDbContext();
        var Product = _context.Products
                .Find(ProductID);

        var curRow = Order
                    .Where(ord => ord.InvoiceRowProduct == Product)
                    .FirstOrDefault();

        if (curRow == null){
            this.Order.Add(new InvoiceRow()
                {
                    InvoiceRowQuantity = 1,
                    InvoiceRowProduct = Product,
                    InvoiceRowPrice= Product.ProductPrice
                });
        } else {
            curRow.InvoiceRowQuantity += 1;
            curRow.InvoiceRowPrice = Product.ProductPrice * curRow.InvoiceRowQuantity;
        }
        SubTotal();
    }
    private void SubProduct(MouseEventArgs e, int ProductID) {
        //_context = DbFactory.CreateDbContext();
        var Product = _context.Products
                .Find(ProductID);

        var curRow = Order
                    .Where(ord => ord.InvoiceRowProduct == Product)
                    .FirstOrDefault();

        if (curRow != null) {
            curRow.InvoiceRowQuantity -= 1;

            if (curRow.InvoiceRowQuantity <1)
                Order.Remove(curRow);


            curRow.InvoiceRowPrice = Product.ProductPrice * curRow.InvoiceRowQuantity;
        }
        SubTotal();
    }


    private void SaveOrder() {
        var curInvoice = new Invoice();
        var trans= _context.Database.BeginTransaction();
        _context.Invoices.Add(curInvoice);
        _context.SaveChanges();
        foreach(var r in Order) {
            r.ParentInvoice = curInvoice;
        }
        curInvoice.InvoiceRows.AddRange(Order);
        curInvoice.InvoiceGrandTotal = (double)Order.Sum(o => o.InvoiceRowPrice) ;
        _context.SaveChanges();
        //_context.Database.CommitTransaction();
        trans.Commit();
    }

    private void PrintTotalAsSvg()
    {
        SaveOrder();
        
        // Crea SVG usando SkiaSharp
        using (var surface = SKSurface.Create(new SKImageInfo(384, 800))) // Larghezza standard per stampante termica
        {
            var canvas = surface.Canvas;
            canvas.Clear(SKColors.White);

            // Configura il testo
            using (var paint = new SKPaint
            {
                Color = SKColors.Black,
                TextSize = 12,
                IsAntialias = true,
                TextAlign = SKTextAlign.Left
            })
            {
                float yPos = 20;
                
                // Logo (se presente)
                if (File.Exists(cfg.LogoFile))
                {
                    using (var bitmap = SKBitmap.Decode(cfg.LogoFile))
                    {
                        canvas.DrawBitmap(bitmap, 10, yPos);
                        yPos += bitmap.Height + 10;
                    }
                }

                // Intestazione
                if (File.Exists(cfg.HeaderFile))
                {
                    string head = File.ReadAllText(cfg.HeaderFile);
                    canvas.DrawText(head, 10, yPos, paint);
                    yPos += 30;
                }

                // Righe ordine
                foreach (var o in Order)
                {
                    string line = string.Format("{0,1:D2}x {1,-10}  {2,4:F2} €",
                        o.InvoiceRowQuantity,
                        o.InvoiceRowProduct.ProductDescription,
                        o.InvoiceRowPrice);
                    canvas.DrawText(line, 10, yPos, paint);
                    yPos += 20;
                }

                // Totale
                double tot = Order.Sum(o => o.InvoiceRowPrice);
                yPos += 10;
                canvas.DrawLine(10, yPos, 374, yPos, paint);
                yPos += 20;
                
                // Totale in grassetto e più grande
                paint.TextSize = 16;
                // paint.IsBold = true;
                string totalLine = string.Format("TOTALE: {0:F2} €", tot);
                canvas.DrawText(totalLine, 10, yPos, paint);

                // Piè di pagina
                if (File.Exists(cfg.TailFile))
                {
                    yPos += 30;
                    paint.TextSize = 12;
                    // paint.IsBold = false;
                    string tail = File.ReadAllText(cfg.TailFile);
                    canvas.DrawText(tail, 10, yPos, paint);
                }
            }

            // Converti in bitmap
            using (var image = surface.Snapshot())
            using (var data = image.Encode(SKEncodedImageFormat.Png, 100))
            {
                var tempFile = Path.Combine(Path.GetTempPath(), "receipt.png");
                using (var stream = File.OpenWrite(tempFile))
                {
                    data.SaveTo(stream);
                }
                
                // Stampa l'immagine
                var bitmap = new System.Drawing.Bitmap(tempFile);
                lpt.Image(bitmap);
                lpt.FullPaperCut();
                lpt.PrintDocument();
                
                // Pulisci
                bitmap.Dispose();
                Task.Delay(1000).Wait();
                // File.Delete(tempFile);
            }
        }

        CleanOrder();
    }

    private void PrintTotal() {


        IsPrinting= true;


        return ;

        SaveOrder();

        lpt.Clear();
    
        var path = cfg.WorkingPath;
        
        if(File.Exists(cfg.LogoFile)) {
            var png = new System.Drawing.Bitmap(System.Drawing.Bitmap.FromFile( cfg.LogoFile) );
            lpt.Image(png);
        } else {
            Console.WriteLine("Not found {0}",cfg.LogoFile);
        }
        if(File.Exists(cfg.HeaderFile)) {
            string head = File.ReadAllText(cfg.HeaderFile);
            lpt.Append(head);
        }  else {
            Console.WriteLine("Not found {0}",cfg.HeaderFile);
        }

        lpt.NewLines(2);
        double tot = 0.0d;
        char Euro = Convert.ToChar(0xD5); //'E'; //&euro;
        foreach(var o in Order) {
            lpt.Append(string.Format("{0,1:D2}x {1,-10}  {3,4:F2} {4}", o.InvoiceRowQuantity, o.InvoiceRowProduct.ProductDescription,
                        o.InvoiceRowProduct.ProductPrice, o.InvoiceRowPrice,Euro) );
            tot += o.InvoiceRowPrice;
        }
        lpt.NewLines(2);
        //Grand Total
        lpt.Append("================================");
        lpt.DoubleWidth2();
        lpt.Append(string.Format("TOTALE: {0,5:F2} {1}", tot, Euro));
        lpt.NormalWidth();
        lpt.Append("================================");

        if (File.Exists(cfg.TailFile)) {
            string tail = File.ReadAllText(cfg.TailFile);
            lpt.Append(tail);
        }else {
            Console.WriteLine("Not found {0}",cfg.TailFile);
        }
        lpt.NewLines(2);

        lpt.FullPaperCut();
        lpt.PrintDocument();

        CleanOrder();
    }

}
