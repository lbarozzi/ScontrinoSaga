@page "/Comanda"

@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager Navigation
@inject SagaConfig cfg
@inject IWebHostEnvironment Environment
@using ESCPOS_NET
@using ESCPOS_NET.Emitters;


<PageTitle>Comanda</PageTitle>

<h1>@(DateTime.Now.ToShortDateString() ): Comanda</h1>

@if (Products != null ) {
    <h3>Prodotti</h3>
    @foreach (var p in Products){
        <div class="card">
            <div class="card-body">
                <button class="btn btn-primary btn-prod" @onclick="(args)=> AddProduct(args, p.ProductID)">
                    <img class="prdlogo" src="@p.ProductIcon" height="64px" width="64px"/>
                    <br />@p.ProductDescription
                </button>
                <button class="btn btn-danger btn-prod" height="64px" @onclick="(args)=> SubProduct(args, p.ProductID)">
                    <img class="prdlogo" src="@p.ProductIcon" height="64px" width="64px" />
                    <br />@p.ProductDescription
                </button>
            </div>
        </div>
    } 
}
<hr />
<!-- Print stylesheet -->
<style>
    .print: {
        display: block; 
        width:58mm !important; 
        padding-left: 1mm; 
        padding-right: 1mm; ; 
    }
</style>

<div  id="printer" class="modal print"  >
    <div class="modal-dialog">
    <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Modal Header</h4>
            </div>
            <div class="modal-body">
                <img src="logo.png"  class="print" /> 
                @foreach (var p in Order){
                    <div class="print">
                        @p.InvoiceRowQuantity X @p.InvoiceRowProduct.ProductDescription @p.InvoiceRowProduct.ProductPrice &euro;
                        <!--
                        <div class="card-body justify-content-end">
                            @p.InvoiceRowPrice &euro;
                        </div>
                        -->
                    </div>
                }
                <div class="print">
                    <b>@string.Format("Totale: {0:F2}", @subTotal)</b>
                </div>
            </div>
        </div>
    </div>
</div>


@if (Order != null ) {
    <h3>Order</h3>
    @foreach (var p in Order){
        <div class="card">
            <div class="card-header">
                @p.InvoiceRowQuantity X @p.InvoiceRowProduct.ProductDescription @p.InvoiceRowProduct.ProductPrice &euro;
            </div>
            <!--
            <div class="card-body justify-content-end">
                @p.InvoiceRowPrice &euro;
            </div>
            -->
        </div>
    }
}

<hr />
<div class="">
    <b>@string.Format("Totale Provisorio: {0:F2}", @subTotal)</b>
</div>
<hr />
@if (ImageCurrent != "") {
    <div class="nav-item px-3">
        <NavLink class="nav-link" href="@string.Format("/images/{0}",@ImageCurrent)" >
            <span class="oi oi-image" aria-hidden="true"></span> Visualizza Immagine
        </NavLink>
    </div>
} else { 
    <button class="btn btn-primary" @onclick="PrintTotalAsSvg">Conferma Ordine</button>
}
@code {
    private double subTotal = 0;
    private AppDBContext _context;
    private IEnumerable<Product> Products;
    private List<InvoiceRow> Order;
    //Printer lpt;
    public string ImageCurrent { get; set; } = "";

    // FilePrinter lpt; 
    public bool IsPrinting = false;

    protected override async Task OnInitializedAsync() {
        _context = DbFactory.CreateDbContext();

        // this.lpt = new Printer("ExcelVan", "utf-8");
        // this.lpt = new Printer(cfg.PrinterName, "0"); //"utf-8");
        // this.lpt = new SerialPrinter(cfg.PrinterName,baudRate:115200);
        // this.lpt = new FilePrinter(cfg.PrinterName);

        Products = _context.Products
                .Where(p => p.IsAvaialable)
                .ToList();

        //currentCount = 0;
        this.CleanOrder();
    }
    private void CleanOrder() {
        subTotal = 0d;
        this.Order = new List<InvoiceRow>();
        /*
        foreach (var p in Products) {
            var tmp = new InvoiceRow() {
            InvoiceRowQuantity = 0,
            InvoiceRowProduct = p
            };

            Order.Append(tmp);
        }
        //*/
    }

    private void SubTotal() {
        subTotal = Order.Sum(iv => iv.InvoiceRowPrice);
    }

    private void AddProduct(MouseEventArgs e,int ProductID) {
        //_context = DbFactory.CreateDbContext();
        var Product = _context.Products
                .Find(ProductID);

        var curRow = Order
                    .Where(ord => ord.InvoiceRowProduct == Product)
                    .FirstOrDefault();

        if (curRow == null){
            this.Order.Add(new InvoiceRow()
                {
                    InvoiceRowQuantity = 1,
                    InvoiceRowProduct = Product,
                    InvoiceRowPrice= Product.ProductPrice
                });
        } else {
            curRow.InvoiceRowQuantity += 1;
            curRow.InvoiceRowPrice = Product.ProductPrice * curRow.InvoiceRowQuantity;
        }
        SubTotal();
    }
    private void SubProduct(MouseEventArgs e, int ProductID) {
        //_context = DbFactory.CreateDbContext();
        var Product = _context.Products
                .Find(ProductID);

        var curRow = Order
                    .Where(ord => ord.InvoiceRowProduct == Product)
                    .FirstOrDefault();

        if (curRow != null) {
            curRow.InvoiceRowQuantity -= 1;

            if (curRow.InvoiceRowQuantity <1)
                Order.Remove(curRow);


            curRow.InvoiceRowPrice = Product.ProductPrice * curRow.InvoiceRowQuantity;
        }
        SubTotal();
    }


    private void SaveOrder() {
        var curInvoice = new Invoice();
        var trans= _context.Database.BeginTransaction();
        _context.Invoices.Add(curInvoice);
        _context.SaveChanges();
        //Name
        this.ImageCurrent = $"{curInvoice.InvoiceGUID}";
        //Order
        foreach(var r in Order) {
            r.ParentInvoice = curInvoice;
        }
        curInvoice.InvoiceRows.AddRange(Order);
        curInvoice.InvoiceGrandTotal = (double)Order.Sum(o => o.InvoiceRowPrice) ;
        _context.SaveChanges();
        //_context.Database.CommitTransaction();
        trans.Commit();
    }

    private void PrintTotalAsSvg()
    {
        SaveOrder();

        // Crea il contenuto SVG
        var svgContent = new System.Text.StringBuilder();
        svgContent.AppendLine("<svg width='58mm' height='800' xmlns='http://www.w3.org/2000/svg'>");
        svgContent.AppendLine("<rect width='100%' height='100%' fill='white'/>");

        float yPos = 20;

        // Logo (se presente)
        if (File.Exists(cfg.LogoFile))
        {
            var logoData = Convert.ToBase64String(File.ReadAllBytes(cfg.LogoFile));
            svgContent.AppendLine($"<image href='data:image/png;base64,{logoData}' x='10' y='{yPos}' width='100' height='100'/>");
            yPos += 110;
        }

        // Intestazione
        if (File.Exists(cfg.HeaderFile))
        {
            string head = File.ReadAllText(cfg.HeaderFile);
            svgContent.AppendLine($"<text x='10' y='{yPos}' font-size='12' fill='black'>{head}</text>");
            yPos += 30;
        }

        // Righe ordine
        foreach (var o in Order)
        {
            string line = $"{o.InvoiceRowQuantity}x {o.InvoiceRowProduct.ProductDescription}  {o.InvoiceRowPrice:F2} €";
            svgContent.AppendLine($"<text x='10' y='{yPos}' font-size='12' fill='black'>{line}</text>");
            yPos += 20;
        }

        // Totale
        double tot = Order.Sum(o => o.InvoiceRowPrice);
        yPos += 10;
        svgContent.AppendLine($"<line x1='10' y1='{yPos}' x2='374' y2='{yPos}' stroke='black'/>");
        yPos += 20;

        // Totale in grassetto e più grande
        svgContent.AppendLine($"<text x='10' y='{yPos}' font-size='16' fill='black'>TOTALE: {tot:F2} €</text>");

        // Piè di pagina
        if (File.Exists(cfg.TailFile))
        {
            yPos += 30;
            string tail = File.ReadAllText(cfg.TailFile);
            svgContent.AppendLine($"<text x='10' y='{yPos}' font-size='12' fill='black'>{tail}</text>");
        }

        svgContent.AppendLine("</svg>");

        // Salva il contenuto SVG in un file
        var tempFile = Path.Combine(Environment.WebRootPath, $"images/{this.ImageCurrent}.svg");
        File.WriteAllText(tempFile, svgContent.ToString());

        CleanOrder();
        Navigation.NavigateTo($"image/{this.ImageCurrent}");
    }
    /*// OLD CODE
    private void PrintTotal() {

        IsPrinting= true;

        return ;

        SaveOrder();

        lpt.Clear();
    
        var path = cfg.WorkingPath;
        
        if(File.Exists(cfg.LogoFile)) {
            var png = new System.Drawing.Bitmap(System.Drawing.Bitmap.FromFile( cfg.LogoFile) );
            lpt.Image(png);
        } else {
            Console.WriteLine("Not found {0}",cfg.LogoFile);
        }
        if(File.Exists(cfg.HeaderFile)) {
            string head = File.ReadAllText(cfg.HeaderFile);
            lpt.Append(head);
        }  else {
            Console.WriteLine("Not found {0}",cfg.HeaderFile);
        }

        lpt.NewLines(2);
        double tot = 0.0d;
        char Euro = Convert.ToChar(0xD5); //'E'; //&euro;
        foreach(var o in Order) {
            lpt.Append(string.Format("{0,1:D2}x {1,-10}  {3,4:F2} {4}", o.InvoiceRowQuantity, o.InvoiceRowProduct.ProductDescription,
                        o.InvoiceRowProduct.ProductPrice, o.InvoiceRowPrice,Euro) );
            tot += o.InvoiceRowPrice;
        }
        lpt.NewLines(2);
        //Grand Total
        lpt.Append("================================");
        lpt.DoubleWidth2();
        lpt.Append(string.Format("TOTALE: {0,5:F2} {1}", tot, Euro));
        lpt.NormalWidth();
        lpt.Append("================================");

        if (File.Exists(cfg.TailFile)) {
            string tail = File.ReadAllText(cfg.TailFile);
            lpt.Append(tail);
        }else {
            Console.WriteLine("Not found {0}",cfg.TailFile);
        }
        lpt.NewLines(2);

        lpt.FullPaperCut();
        lpt.PrintDocument();

        CleanOrder();
    }
    //*/

}
