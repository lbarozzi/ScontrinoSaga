@page "/"
@inject IDbContextFactory<AppDBContext> DbFactory

<PageTitle>Index</PageTitle>

<h1>Saga.Net </h1>

<div class="">
    <b>
    @String.Format("Totale Odierno: {0:F2} / Totale: {1:F2}", @TotInvoices,@TotFull) &euro;
    </b>
</div>
<div class="list-group">
    @foreach (var pl_k in TotProduct.Keys) {
        <div class="list-group-item">
            @String.Format("{0} : {1:F2}", pl_k, TotProduct[pl_k]) &euro;
        </div>
    }
</div>
<hr />
@foreach (var inv in Invoices) {
    <div class="card">
        <div class="card-header">
            <a href="@string.Format("/image/{0}",inv.InvoiceGUID)">
            @inv.InvoiceDate.ToShortDateString() @@ @inv.InvoiceDate.ToShortTimeString()  <b> @String.Format("TOT: {0:F2}", inv.InvoiceGrandTotal)</b>
            </a>
        </div>
        <div class="card-body">
            <div class="list-group">
            @foreach(var o in inv.InvoiceRows) {
                <div class="list-group-item">
                    @o.InvoiceRowQuantity
                    &nbsp;
                    @o.InvoiceRowProduct.ProductDescription
                    </div>
            }
            </div>
        </div>
    </div>
}


@code {
    private AppDBContext _context;
    private IEnumerable<Product> Products;
    private List<Invoice> Invoices;
    private decimal TotInvoices;
    private decimal TotFull;
    private Dictionary<string, decimal> TotProduct;

    protected override async Task OnInitializedAsync() {
        _context = DbFactory.CreateDbContext();
        Invoices = _context.Invoices
                    .OrderByDescending(inv=>inv.InvoiceDate)
                    .Where(inv => inv.InvoiceDate.Date == DateTime.Now.Date)
                    .Include(inv=>inv.InvoiceRows)
                    .ThenInclude(inv=>inv.InvoiceRowProduct)
                    .ToList();
        TotInvoices = (decimal)_context.Invoices
                                .Where(inv=>inv.InvoiceDate.Date==DateTime.Now.Date )
                                .Sum(o => o.InvoiceGrandTotal);

        TotFull = (decimal)_context.Invoices
                                //.Where(inv => inv.InvoiceDate.Date<DateTime.Now.Date)
                                .Sum(o => o.InvoiceGrandTotal);

        TotProduct = new Dictionary<string, decimal>();
        foreach (var p in _context.Products.Where(p => p.IsAvaialable)) {
            TotProduct[p.ProductDescription] = (decimal)_context.InvoicesRows
                                                    .Where(ir => ir.InvoiceRowProduct == p)
                                                    .Include(p=>p.ParentInvoice)
                                                    .Where(ir=> ir.ParentInvoice.InvoiceDate.Date ==DateTime.Now.Date)
                                                    .Sum(p => p.InvoiceRowPrice);

        }
    }
}
