@page "/Products"
@using System.IO
@inject IDbContextFactory<AppDBContext> DbFactory
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject IWebHostEnvironment Environment
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Gestione Prodotti</PageTitle>

<h1>Gestione Prodotti</h1>

<button class="btn btn-primary" @onclick="CreateNewProduct">Nuovo Prodotto</button>

@if (products == null)
{
    <p>Caricamento...</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Icona</th>
                <th>Descrizione</th>
                <th>Prezzo</th>
                <th>Disponibile</th>
                <th>Azioni</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.ProductID</td>
                    <td>
                        @if (editingProduct?.ProductID == product.ProductID)
                        {
                            <div>
                                @if (!string.IsNullOrEmpty(tempIconPath))
                                {
                                    <img src="@tempIconPath" class="product-icon mb-2" />
                                }
                                else if (!string.IsNullOrEmpty(product.ProductIcon))
                                {
                                    <img src="@product.ProductIcon" class="product-icon mb-2" />
                                }
                                <InputFile OnChange="HandleFileSelected" accept="image/*" class="form-control" />
                            </div>
                        }
                        else if (!string.IsNullOrEmpty(product.ProductIcon))
                        {
                            <img src="@product.ProductIcon" class="product-icon" />
                        }
                    </td>
                    <td>
                        @if (editingProduct?.ProductID == product.ProductID)
                        {
                            <input @bind="editingProduct.ProductDescription" class="form-control" />
                        }
                        else
                        {
                            @product.ProductDescription
                        }
                    </td>
                    <td>
                        @if (editingProduct?.ProductID == product.ProductID)
                        {
                            <input @bind="editingProduct.ProductPrice" class="form-control" type="number" step="0.01" />
                        }
                        else
                        {
                            @product.ProductPrice.ToString("C2")
                        }
                    </td>
                    <td>
                        @if (editingProduct?.ProductID == product.ProductID)
                        {
                            <input @bind="editingProduct.IsAvaialable" type="checkbox" />
                        }
                        else
                        {
                            <input type="checkbox" checked="@product.IsAvaialable" disabled />
                        }
                    </td>
                    <td>
                        @if (editingProduct?.ProductID == product.ProductID)
                        {
                            <button class="btn btn-success" @onclick="SaveProduct">Salva</button>
                            <button class="btn btn-secondary" @onclick="CancelEdit">Annulla</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => EditProduct(product)">Modifica</button>
                            <button class="btn btn-danger" @onclick="() => DeleteProduct(product)">Elimina</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<style>
    .product-icon {
        width: 32px;
        height: 32px;
        object-fit: contain;
    }
</style>

@code {
    private List<Product> products;
    private Product editingProduct;
    private AppDBContext _context;
    private string tempIconPath;
    private IBrowserFile uploadedFile;

    protected override async Task OnInitializedAsync()
    {
        _context = DbFactory.CreateDbContext();
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        products = await _context.Products.ToListAsync();
    }

    private void CreateNewProduct()
    {
        editingProduct = new Product
        {
            ProductDescription = "",
            ProductPrice = 0,
            IsAvaialable = true
        };
        products.Add(editingProduct);
        tempIconPath = null;
        uploadedFile = null;
    }

    private void EditProduct(Product product)
    {
        editingProduct = new Product
        {
            ProductID = product.ProductID,
            ProductDescription = product.ProductDescription,
            ProductPrice = product.ProductPrice,
            ProductIcon = product.ProductIcon,
            IsAvaialable = product.IsAvaialable
        };
        tempIconPath = null;
        uploadedFile = null;
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        
        // Mostra anteprima dell'immagine
        if (uploadedFile != null)
        {
            var format = "image/png";
            var resizedImageFile = await uploadedFile.RequestImageFileAsync(format, 100, 100);
            var buffer = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffer);
            var imageBase64 = Convert.ToBase64String(buffer);
            tempIconPath = $"data:{format};base64,{imageBase64}";
        }
    }

    private async Task SaveProduct()
    {
        // Salva l'immagine caricata se presente
        if (uploadedFile != null)
        {
            var extension = Path.GetExtension(uploadedFile.Name);
            var fileName = $"{Guid.NewGuid()}{extension}";
            var folderPath = Path.Combine(Environment.WebRootPath, "images", "products");
            
            // Assicurati che la cartella esista
            if (!Directory.Exists(folderPath))
            {
                Directory.CreateDirectory(folderPath);
            }
            
            var filePath = Path.Combine(folderPath, fileName);
            
            using (var stream = uploadedFile.OpenReadStream())
            using (var fileStream = new FileStream(filePath, FileMode.Create))
            {
                await stream.CopyToAsync(fileStream);
            }
            
            // Aggiorna il percorso dell'icona
            editingProduct.ProductIcon = $"/images/products/{fileName}";
        }

        if (editingProduct.ProductID == 0)
        {
            _context.Products.Add(editingProduct);
        }
        else
        {
            var product = await _context.Products.FindAsync(editingProduct.ProductID);
            if (product != null)
            {
                product.ProductDescription = editingProduct.ProductDescription;
                product.ProductPrice = editingProduct.ProductPrice;
                product.IsAvaialable = editingProduct.IsAvaialable;
                
                // Aggiorna solo se Ã¨ stata caricata una nuova icona
                if (!string.IsNullOrEmpty(editingProduct.ProductIcon) && editingProduct.ProductIcon != product.ProductIcon)
                {
                    product.ProductIcon = editingProduct.ProductIcon;
                }
            }
        }

        await _context.SaveChangesAsync();
        editingProduct = null;
        tempIconPath = null;
        uploadedFile = null;
        await LoadProducts();
    }

    private void CancelEdit()
    {
        if (editingProduct.ProductID == 0)
        {
            products.Remove(editingProduct);
        }
        editingProduct = null;
        tempIconPath = null;
        uploadedFile = null;
    }

    private async Task DeleteProduct(Product product)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Sei sicuro di voler eliminare questo prodotto?" }))
        {
            // Opzionalmente, puoi anche eliminare il file immagine associato
            if (!string.IsNullOrEmpty(product.ProductIcon))
            {
                var imagePath = Path.Combine(Environment.WebRootPath, product.ProductIcon.TrimStart('/'));
                if (File.Exists(imagePath))
                {
                    File.Delete(imagePath);
                }
            }
            
            _context.Products.Remove(product);
            await _context.SaveChangesAsync();
            await LoadProducts();
        }
    }
}